apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbit
  labels:
    app: rabbit
spec:
  replicas: 1
  selector:
    matchLabels:
      name: rabbit
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: rabbit
        app: rabbit
    spec:
      containers:
      - image: bitnami/rabbitmq:latest
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          tcpSocket:
            port: 5672
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
              - bash
              - -c
              - grep "Server startup complete" /opt/bitnami/rabbitmq/var/log/rabbitmq/rabbit@localhost.log | wc -l | grep 2
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        envFrom:
          - secretRef:
              name: env
        name: rabbit
        ports:
        - containerPort: 30424
          protocol: TCP
        - containerPort: 5672
          protocol: TCP
        - containerPort: 15672
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: rabbit
    app: rabbit
  name: rmq
spec:
  type: NodePort
  ports:
    - name: port1
      port: 30424
      targetPort: 30424
      nodePort: 30424
    - name: port2
      port: 5672
      targetPort: 5672
      nodePort: 5672
    - name: port3
      port: 15672
      targetPort: 15672
      nodePort: 15672
  selector:
    app: rabbit
  ipFamilyPolicy: RequireDualStack
  ipFamilies:
    - IPv4
    - IPv6
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rabbit
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: letsencrypt-production
spec:
  rules:
    - host: rmq.clrn.dev
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: rmq
                port:
                  number: 15672
  tls:
    - hosts:
      - rmq.clrn.dev
      secretName: rmq-tls-secret
