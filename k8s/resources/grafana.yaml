apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pv-claim
spec:
  storageClassName: local-path
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      name: grafana
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: grafana
        app: grafana
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: grafana-pv-claim
      containers:
      - image: grafana/grafana
        envFrom:
          - secretRef:
              name: env
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: data
            mountPath: /var/lib/grafana
        name: grafana
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        ports:
        - containerPort: 3000
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: grafana
    app: grafana
  name: grafana
spec:
  type: ClusterIP
  ports:
    - name: port1
      port: 3000
      targetPort: 3000
  selector:
    app: grafana
  ipFamilyPolicy: RequireDualStack
  ipFamilies:
    - IPv4
    - IPv6
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: letsencrypt-production
spec:
  rules:
    - host: grafana.clrn.dev
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 3000
  tls:
    - hosts:
      - grafana.clrn.dev
      secretName: grafana-tls-secret
