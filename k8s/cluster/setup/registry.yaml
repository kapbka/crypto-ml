apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: registry-pv-claim
spec:
  storageClassName: local-path
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 30Gi
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: registry
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
    k8s-app: registry
    version: v2.7.1
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: registry
      version: v2.7.1
  template:
    metadata:
      labels:
        k8s-app: registry
        version: v2.7.1
    spec:
      volumes:
        - name: registry-pvc
          persistentVolumeClaim:
            claimName: registry-pv-claim
      containers:
        - name: registry
          image: docker.io/library/registry:2.7.1
          command:
            - /bin/registry
            - serve
            - /etc/docker/registry/config.yml
          ports:
            - name: registry
              containerPort: 5000
              protocol: TCP
          env:
            - name: REGISTRY_STORAGE_DELETE_ENABLED
              value: "true"
            - name: REGISTRY_HTTP_ADDR
              value: ':5000'
            - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
              value: /var/lib/registry
          resources: {}
          volumeMounts:
            - name: registry-pvc
              mountPath: /var/lib/registry
          livenessProbe:
            httpGet:
              path: /
              port: 5000
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 5000
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      schedulerName: default-scheduler
      priorityClassName: system-cluster-critical
---
apiVersion: v1
kind: Service
metadata:
  name: registry
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
    k8s-app: registry
    kubernetes.io/name: KubeRegistry
spec:
  ports:
    - name: registry
      protocol: TCP
      port: 5000
      targetPort: 5000
  selector:
    k8s-app: registry
  type: ClusterIP
  ipFamilies:
    - IPv4
    - IPv6
  ipFamilyPolicy: RequireDualStack
  internalTrafficPolicy: Cluster
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: registry
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: letsencrypt-production
    nginx.ingress.kubernetes.io/proxy-connect-timeout: '86400'
    nginx.ingress.kubernetes.io/proxy-send-timeout: '86400'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '86400'
    nginx.ingress.kubernetes.io/proxy-body-size: 8g
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - ci'
spec:
  rules:
    - host: docker.clrn.dev
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: registry
                port:
                  number: 5000
  tls:
    - hosts:
      - docker.clrn.dev
      secretName: tls-secret
